#lang racket


;TDA Pregunta ((ID x AUTOR x FECHA x PREGUNTA) x (TAGS) x (ID RESPUESTAS) x REWARD x (VOTOS x NUMEROVISUALIZACIONES x REPORTES x ESTADO))
;Constructor (pregunta id autor fecha pregunta tags)
(define pregunta (lambda(id autor fecha pregunta tag1 tag2 tag3)
                   (list (list id autor fecha pregunta)(list tag1 tag2 tag3) null 0(list(cons 0 0) 0 0 0))))
;Selectores
;(idPregunta pregunta)(autorPregunta pregunta)(fechaPregunta pregunta)(Pregunta pregunta)(tagsPregunta pregunta)
;(idRespuestas pregunta)(reward pregunta)
(define primeraPregunta car)
(define primerTag car)
(define segundoTag cadr)
(define tercerTag caddr)
(define sigPregunta cdr)
(define tagsPregunta cadr)
(define idPregunta (lambda(pregunta)
                     (car(car pregunta))))
(define autorPregunta (lambda(pregunta)
                        (cadr(car pregunta))))
(define fechaPregunta (lambda(pregunta)
                        (caddr(car pregunta))))
(define getPregunta (lambda(pregunta)
                      (cadddr(car pregunta))))
(define idRespuestas caddr)
(define getReward cadddr)
(define primerosDatosPregunta car)
(define ultimosDatosPregunta(lambda(pregunta)
                              (cdddr(cdr pregunta))))

;Modificadores

 
(define addIdPregunta (lambda(pregunta idResp)
 (list(primerosDatosPregunta pregunta)(tagsPregunta pregunta)(list idResp(idRespuestas pregunta))0(ultimosDatosPregunta pregunta))))

;otras funciones
;(contador preguntas)
(define contador (lambda(preguntas)
                   (if(null? preguntas)
                      0
                      (+ (contador(sigPregunta preguntas))1))))



